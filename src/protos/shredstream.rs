// This file is @generated by prost-build.

/// `Heartbeat` 结构体用于表示客户端向服务器发送的心跳信息。
/// 它通常用于 Solana 的 shredstream（碎片流）系统中，
/// 客户端通过心跳告知服务器自己的状态、IP 信息和希望接收数据的区域。
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Heartbeat {
    /// 客户端的 Socket 信息。
    /// - `socket.ip` 必须匹配实际接收到的数据包来源 IP。
    /// - 这是为了防止 IP 欺骗和滥用，例如阻止恶意客户端伪造来源发送垃圾数据。
    /// - 使用 `Option` 包装是因为在某些情况下，Socket 信息可能暂时缺失。
    #[prost(message, optional, tag = "1")]
    pub socket: ::core::option::Option<super::shared::Socket>,

    /// 客户端希望从哪些区域接收碎片（shreds）。
    /// - 这是一个字符串列表，每个字符串表示一个地理区域或数据中心。
    /// - 有效值参考 Jito 文档: <https://docs.jito.wtf/lowlatencytxnsend/#api>
    /// - 服务器会根据这些区域选择性地发送数据，以优化延迟和带宽。
    #[prost(string, repeated, tag = "2")]
    pub regions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// `HeartbeatResponse` 结构体用于服务器对客户端心跳的响应。
/// 它告诉客户端需要在多长时间内再次发送心跳以维持连接活跃。
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HeartbeatResponse {
    /// TTL（Time To Live）以毫秒为单位。
    /// - 客户端必须在 `ttl_ms` 时间内再次发送心跳，否则服务器可能会认为连接断开。
    /// - 这是维持 shredstream 数据流稳定的重要机制。
    #[prost(uint32, tag = "1")]
    pub ttl_ms: u32,
}
/// `TraceShred` 结构体用于跟踪 Solana shred（碎片）在网络中的来源和顺序信息。
/// 每个 `TraceShred` 对象对应一个碎片的元数据，用于分析延迟、排序和来源。
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TraceShred {
    /// 碎片来源的区域（region）。
    /// - 字符串表示一个地理区域或数据中心。
    /// - 有效值参考 Jito 文档: <https://docs.jito.wtf/lowlatencytxnsend/#api>
    #[prost(string, tag = "1")]
    pub region: ::prost::alloc::string::String,

    /// 碎片创建时间戳。
    /// - 使用 `prost_types::Timestamp` 类型，可记录精确时间。
    /// - 可选字段，有时可能缺失。
    #[prost(message, optional, tag = "2")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,

    /// 碎片序号（sequence number）。
    /// - 单调递增，用于在同一服务会话中跟踪碎片顺序。
    /// - 服务重启后会重置。
    #[prost(uint32, tag = "3")]
    pub seq_num: u32,
}
/// tbd: we may want to add filters here
/// `SubscribeEntriesRequest` 结构体用于客户端向服务器请求订阅 Solana shred entries（区块条目）。
/// 该请求没有额外字段，只表示客户端希望开始接收 entries 数据流。
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SubscribeEntriesRequest {}

/// `Entry` 结构体表示 Solana 区块链中的一个条目集合（entries）。
/// 每个 `Entry` 对象对应一个 slot 的所有条目数据。
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Entry {
    /// 该条目所属的 slot。
    /// - Slot 是 Solana 区块链中的基本时间/顺序单位，用于标识区块高度。
    #[prost(uint64, tag = "1")]
    pub slot: u64,

    /// 序列化后的条目数据。
    /// - 存储的是 `Vec<Entry>` 的字节序列。
    /// - 可以使用 [solana-entry crate](https://docs.rs/solana-entry/latest/solana_entry/entry/struct.Entry.html) 进行反序列化。
    /// - 用于传输和存储 slot 内的多个区块条目。
    #[prost(bytes = "vec", tag = "2")]
    pub entries: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
/// `shredstream_client` 模块提供与 Shredstream gRPC 服务交互的客户端实现。
/// Shredstream 是 Solana 网络中用于实时接收区块碎片（shreds）和 entries 的流式服务。
pub mod shredstream_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]

    use tonic::codegen::*;
    use tonic::codegen::http::Uri;

    /// gRPC 客户端，用于与 Shredstream 服务进行通信
    #[derive(Debug, Clone)]
    pub struct ShredstreamClient<T> {
        /// 内部封装的 tonic Grpc 客户端
        inner: tonic::client::Grpc<T>,
    }

    /// 实现针对默认 `tonic::transport::Channel` 的构造方法
    impl ShredstreamClient<tonic::transport::Channel> {
        /// 异步连接到指定 gRPC endpoint 并返回客户端实例
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }

    /// 针对泛型 `T` 实现客户端通用方法
    impl<T> ShredstreamClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        /// 创建新的客户端实例
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }

        /// 创建客户端实例并指定请求的原始 URI
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }

        /// 为客户端添加拦截器（如添加身份验证或日志）
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ShredstreamClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error: Into<StdError> + Send + Sync,
        {
            ShredstreamClient::new(InterceptedService::new(inner, interceptor))
        }

        /// 设置请求压缩方式（如果服务器支持）
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }

        /// 设置允许响应解压
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }

        /// 设置解码消息的最大字节数（默认 4MB）
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }

        /// 设置编码消息的最大字节数（默认 usize::MAX）
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }

        /// 发送心跳以维持 shredstream 数据流
        ///
        /// 客户端定期调用此方法通知服务器自己仍在线，并获取 `ttl_ms`
        /// 用于下一次心跳的时间窗口。
        pub async fn send_heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::Heartbeat>,
        ) -> std::result::Result<tonic::Response<super::HeartbeatResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;

            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/shredstream.Shredstream/SendHeartbeat");

            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("shredstream.Shredstream", "SendHeartbeat"));

            self.inner.unary(req, path, codec).await
        }
    }
}

/// Generated server implementations.
pub mod shredstream_server {
    // 允许部分编译器警告
    #![allow(
        unused_variables, // 未使用的变量
        dead_code,        // 未使用的代码
        missing_docs,     // 缺少文档注释
        clippy::wildcard_imports, // 通配符导入警告
        clippy::let_unit_value,   // let _ = ... 相关警告
    )]

    use tonic::codegen::*; // 引入 Tonic gRPC 相关的 trait 和宏

    /// 生成的 trait，包含所有需要实现的 gRPC 方法
    /// 用于与 ShredstreamServer 一起使用
    #[async_trait]
    pub trait Shredstream: std::marker::Send + std::marker::Sync + 'static {
        /// RPC 接口：发送心跳信号以保持 shred 数据流
        async fn send_heartbeat(
            &self,
            request: tonic::Request<super::Heartbeat>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
    }

    /// gRPC 服务实现结构体
    #[derive(Debug)]
    pub struct ShredstreamServer<T> {
        inner: Arc<T>, // 业务逻辑对象的智能指针
        accept_compression_encodings: EnabledCompressionEncodings, // 接受的压缩类型
        send_compression_encodings: EnabledCompressionEncodings,   // 响应压缩类型
        max_decoding_message_size: Option<usize>, // 最大解码消息大小
        max_encoding_message_size: Option<usize>, // 最大编码消息大小
    }

    impl<T> ShredstreamServer<T> {
        /// 通过普通对象创建 server
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }

        /// 通过 Arc 智能指针创建 server
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }

        /// 创建带有拦截器的 gRPC 服务
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }

        /// 启用接收端压缩
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }

        /// 启用发送端压缩
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }

        /// 设置最大解码消息大小（默认 4MB）
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }

        /// 设置最大编码消息大小（默认 usize::MAX）
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }

    /// 将 server 作为 HTTP 服务处理请求
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ShredstreamServer<T>
    where
        T: Shredstream,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible; // 不可能失败
        type Future = BoxFuture<Self::Response, Self::Error>;

        /// 检查服务是否准备好
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }

        /// 根据请求路径匹配对应 gRPC 方法
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/shredstream.Shredstream/SendHeartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct SendHeartbeatSvc<T: Shredstream>(pub Arc<T>);

                    /// Unary 服务实现
                    impl<T: Shredstream> tonic::server::UnaryService<super::Heartbeat>
                    for SendHeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;

                        fn call(
                            &mut self,
                            request: tonic::Request<super::Heartbeat>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Shredstream>::send_heartbeat(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }

                    // 获取配置
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();

                    // 调用 gRPC unary 方法
                    let fut = async move {
                        let method = SendHeartbeatSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }

                // 未实现的路径
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers.insert(
                            tonic::Status::GRPC_STATUS,
                            (tonic::Code::Unimplemented as i32).into(),
                        );
                        headers.insert(
                            http::header::CONTENT_TYPE,
                            tonic::metadata::GRPC_CONTENT_TYPE,
                        );
                        Ok(response)
                    })
                }
            }
        }
    }

    /// 实现 Clone
    impl<T> Clone for ShredstreamServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }

    /// gRPC 服务名
    pub const SERVICE_NAME: &str = "shredstream.Shredstream";

    /// 实现 NamedService，用于 gRPC 内部注册服务
    impl<T> tonic::server::NamedService for ShredstreamServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}

/// Generated client implementations.
pub mod shredstream_proxy_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ShredstreamProxyClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ShredstreamProxyClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ShredstreamProxyClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ShredstreamProxyClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ShredstreamProxyClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn subscribe_entries(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Entry>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shredstream.ShredstreamProxy/SubscribeEntries",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("shredstream.ShredstreamProxy", "SubscribeEntries"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod shredstream_proxy_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ShredstreamProxyServer.
    #[async_trait]
    pub trait ShredstreamProxy: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the SubscribeEntries method.
        type SubscribeEntriesStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Entry, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn subscribe_entries(
            &self,
            request: tonic::Request<super::SubscribeEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::SubscribeEntriesStream>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ShredstreamProxyServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ShredstreamProxyServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ShredstreamProxyServer<T>
    where
        T: ShredstreamProxy,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/shredstream.ShredstreamProxy/SubscribeEntries" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeEntriesSvc<T: ShredstreamProxy>(pub Arc<T>);
                    impl<
                        T: ShredstreamProxy,
                    > tonic::server::ServerStreamingService<
                        super::SubscribeEntriesRequest,
                    > for SubscribeEntriesSvc<T> {
                        type Response = super::Entry;
                        type ResponseStream = T::SubscribeEntriesStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeEntriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShredstreamProxy>::subscribe_entries(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeEntriesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ShredstreamProxyServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "shredstream.ShredstreamProxy";
    impl<T> tonic::server::NamedService for ShredstreamProxyServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
